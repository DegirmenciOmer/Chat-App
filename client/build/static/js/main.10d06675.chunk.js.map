{"version":3,"sources":["components/Login.js","hooks/useLocalStorage.js","contexts/ContactsProvider.js","contexts/SocketProvider.js","contexts/ConversationsProvider.js","contexts/ToggleSidebarProvider.js","components/Conversations.js","components/Contacts.js","components/NewContactModal.js","components/NewConversationModal.js","components/Sidebar.js","components/OpenConversation.js","components/Header.js","components/IntroModal.js","components/Dashboard.js","App.js","index.js"],"names":["Login","onIdSubmit","idRef","useRef","Container","className","Form","onSubmit","e","preventDefault","current","value","md","Group","Control","placeholder","type","ref","required","ButtonGroup","Button","onClick","uuidV4","variant","useLocalStorage","key","initialValue","prefixedKey","useState","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","ContactsContext","React","createContext","useContacts","useContext","ContactsProvider","children","contacts","setContacts","Provider","createContact","id","name","prevContacts","SocketContext","SocketProvider","socket","setSocket","newSocket","io","process","query","close","ConversationsContext","useConversations","ConversationsProvider","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","addMessageToConversation","useCallback","recipients","text","sender","prevConversations","madeChange","newMessage","newConversations","map","conversation","a","b","length","sort","every","element","index","messages","on","off","formattedConversations","recipient","contact","find","message","fromMe","senderName","selected","selectedConversation","sendMessage","emit","selectConversationIndex","createConversation","ToggleSidebarContext","useToggleSidebar","ToggleSidebarProvider","showSidebar","setShowSidebar","toggleSidebar","prev","Conversations","ListGroup","Item","action","active","r","join","Contacts","alreadyExists","startConversation","style","fontSize","color","NewContactModal","closeModal","nameRef","Modal","Header","closeButton","Title","Body","Label","Footer","NewConversationModal","selectedContactIds","setSelectedContactIds","controlId","Check","includes","label","onChange","contactId","prevSelectedContactIds","filter","prevId","disabled","CONVERSATIONS_KEY","CONTACTS_KEY","Sidebar","activeKey","setActiveKey","modalOpen","setModalOpen","Offcanvas","show","onHide","width","Tab","onSelect","as","Row","Nav","cursor","Link","eventKey","Content","Pane","bg","marginLeft","OpenConversation","setText","setRef","node","scrollIntoView","smooth","lastMessage","maxWidth","InputGroup","target","height","resize","Navbar","fontWeight","IntroModal","setShow","handleClose","backgroundColor","centered","backdrop","keyboard","Dashboard","App","setId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.10d06675.chunk.js","sourcesContent":["import React, { useRef } from 'react'\r\nimport { Container, Form, Button, ButtonGroup } from 'react-bootstrap'\r\nimport { v4 as uuidV4 } from 'uuid'\r\n\r\nexport default function Login({ onIdSubmit }) {\r\n  const idRef = useRef()\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault()\r\n    onIdSubmit(idRef.current.value)\r\n  }\r\n\r\n  function createNewId() {\r\n    onIdSubmit(uuidV4())\r\n  }\r\n\r\n  return (\r\n    <Container className='vh-100 align-items-center d-flex justify-content-center'>\r\n      <Form\r\n        onSubmit={handleSubmit}\r\n        md='8'\r\n        className='align-items-center d-flex flex-column '\r\n      >\r\n        <Form.Group className='mb-2'>\r\n          <Form.Control\r\n            placeholder='Enter Your Id'\r\n            type='text'\r\n            ref={idRef}\r\n            required\r\n          />\r\n        </Form.Group>\r\n        <ButtonGroup className='w-100 ' aria-label='Basic example'>\r\n          <Button className='w-50' type='submit'>\r\n            <span>\r\n              <i className='fa fa-sign-in-alt'></i>\r\n              <span>Login</span>\r\n            </span>\r\n          </Button>\r\n          <Button className='w-50' onClick={createNewId} variant='secondary'>\r\n            New Id\r\n          </Button>\r\n        </ButtonGroup>\r\n      </Form>\r\n    </Container>\r\n  )\r\n}\r\n","import { useEffect, useState } from 'react'\r\n\r\nconst PREFIX = 'whatsapp-clone-'\r\n\r\nexport default function useLocalStorage(key, initialValue) {\r\n  const prefixedKey = PREFIX + key\r\n  const [value, setValue] = useState(() => {\r\n    const jsonValue = localStorage.getItem(prefixedKey)\r\n    if (jsonValue != null) return JSON.parse(jsonValue)\r\n    if (typeof initialValue === 'function') {\r\n      return initialValue()\r\n    } else {\r\n      return initialValue\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(prefixedKey, JSON.stringify(value))\r\n  }, [prefixedKey, value])\r\n\r\n  return [value, setValue]\r\n}\r\n","import React, { useContext } from 'react'\r\nimport useLocalStorage from '../hooks/useLocalStorage'\r\n\r\nconst ContactsContext = React.createContext()\r\n\r\nexport function useContacts() {\r\n  return useContext(ContactsContext)\r\n}\r\n\r\nexport function ContactsProvider({ children }) {\r\n  const [contacts, setContacts] = useLocalStorage('contacts', [])\r\n\r\n  function createContact(id, name) {\r\n    setContacts((prevContacts) => {\r\n      return [...prevContacts, { id, name }]\r\n    })\r\n  }\r\n\r\n  return (\r\n    <ContactsContext.Provider value={{ contacts, createContact }}>\r\n      {children}\r\n    </ContactsContext.Provider>\r\n  )\r\n}\r\n","import React, { useContext, useEffect, useState } from 'react'\r\nimport io from 'socket.io-client'\r\n\r\nconst SocketContext = React.createContext()\r\n\r\nconst URL =\r\n  process.env.REACT_APP_NODE_ENV === 'production'\r\n    ? process.env.REACT_APP_PRODUCTION_URL\r\n    : 'http://localhost:5000/'\r\n\r\nexport function useSocket() {\r\n  return useContext(SocketContext)\r\n}\r\n\r\nexport function SocketProvider({ id, children }) {\r\n  const [socket, setSocket] = useState()\r\n\r\n  useEffect(() => {\r\n    const newSocket = io(URL, { query: { id } })\r\n\r\n    setSocket(newSocket)\r\n\r\n    return () => newSocket.close()\r\n  }, [id])\r\n\r\n  return (\r\n    <SocketContext.Provider value={socket}>{children}</SocketContext.Provider>\r\n  )\r\n}\r\n","import React, { useContext, useState, useEffect, useCallback } from 'react'\r\nimport useLocalStorage from '../hooks/useLocalStorage'\r\nimport { useContacts } from './ContactsProvider'\r\nimport { useSocket } from './SocketProvider'\r\n\r\nconst ConversationsContext = React.createContext()\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext)\r\n}\r\n\r\nexport function ConversationsProvider({ id, children }) {\r\n  const [conversations, setConversations] = useLocalStorage('conversations', [])\r\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0)\r\n  const { contacts } = useContacts()\r\n  const socket = useSocket()\r\n\r\n  function createConversation(recipients) {\r\n    setConversations((prevConversations) => {\r\n      return [...prevConversations, { recipients, messages: [] }]\r\n    })\r\n  }\r\n\r\n  const addMessageToConversation = useCallback(\r\n    //useCallback is used in order to prevent re-render addMessageToConversation in useEffect as dependency\r\n    ({ recipients, text, sender }) => {\r\n      setConversations((prevConversations) => {\r\n        let madeChange = false\r\n        const newMessage = { sender, text }\r\n        const newConversations = prevConversations.map((conversation) => {\r\n          if (arrayEquality(conversation.recipients, recipients)) {\r\n            madeChange = true\r\n            return {\r\n              ...conversation,\r\n              messages: [...conversation.messages, newMessage],\r\n            }\r\n          }\r\n\r\n          return conversation\r\n        })\r\n\r\n        if (madeChange) {\r\n          return newConversations\r\n        } else {\r\n          return [...prevConversations, { recipients, messages: [newMessage] }]\r\n        }\r\n      })\r\n    },\r\n    [setConversations]\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (socket == null) return\r\n\r\n    socket.on('receive-message', addMessageToConversation)\r\n\r\n    return () => socket.off('receive-message')\r\n  }, [socket, addMessageToConversation])\r\n\r\n  function sendMessage(recipients, text) {\r\n    socket.emit('send-message', { recipients, text })\r\n\r\n    addMessageToConversation({ recipients, text, sender: id })\r\n  }\r\n\r\n  const formattedConversations = conversations.map((conversation, index) => {\r\n    const recipients = conversation.recipients.map((recipient) => {\r\n      const contact = contacts.find((contact) => {\r\n        return contact.id === recipient\r\n      })\r\n      const name = (contact && contact.name) || recipient\r\n      return { id: recipient, name }\r\n    })\r\n\r\n    const messages = conversation.messages.map((message) => {\r\n      const contact = contacts.find((contact) => {\r\n        return contact.id === message.sender\r\n      })\r\n      const name = (contact && contact.name) || message.sender\r\n      const fromMe = id === message.sender\r\n      return { ...message, senderName: name, fromMe }\r\n    })\r\n\r\n    const selected = index === selectedConversationIndex\r\n    return { ...conversation, messages, recipients, selected }\r\n  })\r\n\r\n  const value = {\r\n    conversations: formattedConversations,\r\n    selectedConversation: formattedConversations[selectedConversationIndex],\r\n    sendMessage,\r\n    selectConversationIndex: setSelectedConversationIndex,\r\n    createConversation,\r\n  }\r\n\r\n  return (\r\n    <ConversationsContext.Provider value={value}>\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  )\r\n}\r\n\r\nfunction arrayEquality(a, b) {\r\n  if (a.length !== b.length) return false\r\n\r\n  a.sort()\r\n  b.sort()\r\n\r\n  return a.every((element, index) => {\r\n    return element === b[index]\r\n  })\r\n}\r\n","import React, { useContext, useState } from 'react'\r\n\r\nconst ToggleSidebarContext = React.createContext()\r\n\r\nexport function useToggleSidebar() {\r\n  return useContext(ToggleSidebarContext)\r\n}\r\n\r\nexport function ToggleSidebarProvider({ children }) {\r\n  const [showSidebar, setShowSidebar] = useState(false)\r\n\r\n  const toggleSidebar = () => setShowSidebar((prev) => !prev)\r\n\r\n  return (\r\n    <ToggleSidebarContext.Provider\r\n      value={{ toggleSidebar, showSidebar, setShowSidebar }}\r\n    >\r\n      {children}\r\n    </ToggleSidebarContext.Provider>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { ListGroup } from 'react-bootstrap'\r\nimport { useConversations } from '../contexts/ConversationsProvider'\r\nimport { useToggleSidebar } from './../contexts/ToggleSidebarProvider'\r\n\r\nexport default function Conversations() {\r\n  const { conversations, selectConversationIndex } = useConversations()\r\n  const { toggleSidebar } = useToggleSidebar()\r\n\r\n  const handleClick = (ind) => {\r\n    selectConversationIndex(ind)\r\n    toggleSidebar()\r\n  }\r\n\r\n  return (\r\n    <ListGroup variant='flush'>\r\n      {conversations.map((conversation, index) => (\r\n        <ListGroup.Item\r\n          key={index}\r\n          action\r\n          onClick={() => handleClick(index)}\r\n          active={conversation.selected}\r\n        >\r\n          {conversation.recipients.map((r) => r.name).join(', ')}\r\n        </ListGroup.Item>\r\n      ))}\r\n    </ListGroup>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { ListGroup } from 'react-bootstrap'\r\nimport { useContacts } from '../contexts/ContactsProvider'\r\nimport { useConversations } from '../contexts/ConversationsProvider'\r\nimport { useToggleSidebar } from '../contexts/ToggleSidebarProvider'\r\n\r\nconst Contacts = () => {\r\n  const { createConversation, conversations, selectConversationIndex } =\r\n    useConversations()\r\n  const { contacts } = useContacts()\r\n  const { toggleSidebar } = useToggleSidebar()\r\n\r\n  const startConversation = (id, index) => {\r\n    const alreadyExists = conversations.find(\r\n      (conversation) =>\r\n        conversation.recipients.length === 1 &&\r\n        conversation.recipients[0].id === id\r\n    )\r\n\r\n    if (alreadyExists && alreadyExists.recipients[0].id === id) {\r\n      selectConversationIndex(index)\r\n    } else {\r\n      createConversation([id])\r\n    }\r\n    toggleSidebar()\r\n  }\r\n\r\n  return (\r\n    <ListGroup variant='flush'>\r\n      {contacts.map((contact, index) => (\r\n        <ListGroup.Item\r\n          key={contact.id}\r\n          onClick={() => startConversation(contact.id, index)}\r\n        >\r\n          <i\r\n            style={{ fontSize: '21px', color: '#0d6efd' }}\r\n            className='fa fa-user-circle'\r\n          ></i>\r\n          {contact.name}\r\n        </ListGroup.Item>\r\n      ))}\r\n    </ListGroup>\r\n  )\r\n}\r\n\r\nexport default Contacts\r\n","import React, { useRef } from 'react'\r\nimport { Button, Form, Modal } from 'react-bootstrap'\r\nimport { useContacts } from '../contexts/ContactsProvider'\r\n\r\nconst NewContactModal = ({ closeModal }) => {\r\n  const idRef = useRef()\r\n  const nameRef = useRef()\r\n  const { createContact } = useContacts()\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault()\r\n    createContact(idRef.current.value, nameRef.current.value)\r\n    closeModal()\r\n  }\r\n  return (\r\n    <>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>Create Contact</Modal.Title>\r\n      </Modal.Header>\r\n      <Form onSubmit={handleSubmit}>\r\n        <Modal.Body>\r\n          <Form.Group>\r\n            <Form.Label>Id</Form.Label>\r\n            <Form.Control type='text' ref={idRef} required />\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Name</Form.Label>\r\n            <Form.Control type='text' ref={nameRef} required />\r\n          </Form.Group>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button type='submit'>Create</Button>\r\n        </Modal.Footer>\r\n      </Form>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default NewContactModal\r\n","import React, { useState } from 'react'\r\nimport { Modal, Form, Button } from 'react-bootstrap'\r\nimport { useContacts } from '../contexts/ContactsProvider'\r\nimport { useConversations } from '../contexts/ConversationsProvider'\r\n\r\nexport default function NewConversationModal({ closeModal }) {\r\n  const [selectedContactIds, setSelectedContactIds] = useState([])\r\n  const { contacts } = useContacts()\r\n  const { createConversation } = useConversations()\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault()\r\n    const alreadyExists =\r\n      selectedContactIds.length === 1 &&\r\n      contacts.find((contact) => contact.id === selectedContactIds[0])\r\n    if (selectedContactIds.length === 0 || alreadyExists) {\r\n      return\r\n    } else {\r\n      createConversation(selectedContactIds)\r\n    }\r\n    closeModal()\r\n  }\r\n\r\n  function handleCheckboxChange(contactId) {\r\n    setSelectedContactIds((prevSelectedContactIds) => {\r\n      if (prevSelectedContactIds.includes(contactId)) {\r\n        return prevSelectedContactIds.filter((prevId) => {\r\n          return contactId !== prevId\r\n        })\r\n      } else {\r\n        return [...prevSelectedContactIds, contactId]\r\n      }\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>Create Conversation</Modal.Title>\r\n      </Modal.Header>\r\n      <Form onSubmit={handleSubmit}>\r\n        <Modal.Body>\r\n          {contacts.map((contact) => (\r\n            <Form.Group controlId={contact.id} key={contact.id}>\r\n              <Form.Check\r\n                type='checkbox'\r\n                value={selectedContactIds.includes(contact.id)}\r\n                label={contact.name}\r\n                onChange={() => handleCheckboxChange(contact.id)}\r\n              />\r\n            </Form.Group>\r\n          ))}\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button disabled={selectedContactIds === 0} type='submit'>\r\n            Create\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Form>\r\n    </>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Tab, Nav, Button, Modal, Offcanvas, Row } from 'react-bootstrap'\r\nimport Conversations from './Conversations'\r\nimport Contacts from './Contacts'\r\nimport NewContactModal from './NewContactModal'\r\nimport NewConversationModal from './NewConversationModal'\r\n\r\nimport { useContacts } from '../contexts/ContactsProvider'\r\nimport { useConversations } from '../contexts/ConversationsProvider'\r\nimport { useToggleSidebar } from './../contexts/ToggleSidebarProvider'\r\n\r\nconst CONVERSATIONS_KEY = 'conversations'\r\nconst CONTACTS_KEY = 'contacts'\r\n\r\nexport default function Sidebar({ id }) {\r\n  const { contacts } = useContacts()\r\n  const { showSidebar, toggleSidebar } = useToggleSidebar()\r\n  const [activeKey, setActiveKey] = useState(\r\n    contacts.length === 0 ? CONTACTS_KEY : CONVERSATIONS_KEY\r\n  )\r\n  const [modalOpen, setModalOpen] = useState(false)\r\n\r\n  const { conversations } = useConversations()\r\n\r\n  function closeModal() {\r\n    setModalOpen(false)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Offcanvas\r\n        show={showSidebar}\r\n        onHide={toggleSidebar}\r\n        style={{ width: '350px' }}\r\n        className='gradient-bg d-flex flex-column'\r\n      >\r\n        <Tab.Container activeKey={activeKey} onSelect={setActiveKey}>\r\n          <Offcanvas.Header as={Row} closeButton>\r\n            <Nav\r\n              style={{ cursor: 'pointer' }}\r\n              variant='tabs'\r\n              className='justify-content-center flex-row'\r\n            >\r\n              <Offcanvas.Title>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey={CONVERSATIONS_KEY}>\r\n                    Conversations\r\n                  </Nav.Link>\r\n                </Nav.Item>\r\n              </Offcanvas.Title>\r\n              <Offcanvas.Title>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey={CONTACTS_KEY}>Contacts</Nav.Link>\r\n                </Nav.Item>\r\n              </Offcanvas.Title>\r\n            </Nav>\r\n          </Offcanvas.Header>\r\n          <Offcanvas.Body>\r\n            <Tab.Content className='left-tab-container border-right overflow-auto flex-grow-1'>\r\n              <Tab.Pane eventKey={CONVERSATIONS_KEY}>\r\n                {contacts.length === 0 ? (\r\n                  <p bg='warning' className='warning text-center'>\r\n                    You need to add contacts first.\r\n                  </p>\r\n                ) : conversations.length === 0 ? (\r\n                  <div className='d-flex flex-column justify-content-center align-items-center'>\r\n                    <p className='warning text-center'>\r\n                      You have no conversations yet\r\n                    </p>\r\n                    <Button onClick={() => setModalOpen(true)} variant='link'>\r\n                      New Conversation\r\n                    </Button>\r\n                  </div>\r\n                ) : (\r\n                  <Conversations />\r\n                )}\r\n              </Tab.Pane>\r\n              <Tab.Pane eventKey={CONTACTS_KEY}>\r\n                {contacts.length > 0 ? (\r\n                  <Contacts />\r\n                ) : (\r\n                  <div className='d-flex flex-column justify-content-center align-items-center'>\r\n                    <p className='warning text-center'>\r\n                      You have no contacts yet\r\n                    </p>\r\n                    <Button onClick={() => setModalOpen(true)} variant='link'>\r\n                      New Contact\r\n                    </Button>\r\n                  </div>\r\n                )}\r\n              </Tab.Pane>\r\n            </Tab.Content>\r\n          </Offcanvas.Body>\r\n\r\n          <div className='p-2 border-top border-right small'>\r\n            Your Id: <span className='text-muted'>{id}</span>\r\n          </div>\r\n          <Button onClick={() => setModalOpen(true)} className='rounded-0'>\r\n            {activeKey === CONVERSATIONS_KEY ? (\r\n              <span>\r\n                <i className='fa fa-comments '></i>\r\n                <span style={{ marginLeft: '10px' }}>New Conversation</span>\r\n              </span>\r\n            ) : (\r\n              <span>\r\n                <i className='fa fa-id-card '></i>\r\n                <span style={{ marginLeft: '10px' }}>New Contact</span>\r\n              </span>\r\n            )}\r\n          </Button>\r\n        </Tab.Container>\r\n\r\n        <Modal show={modalOpen} onHide={closeModal}>\r\n          {activeKey === CONVERSATIONS_KEY ? (\r\n            <NewConversationModal closeModal={closeModal} />\r\n          ) : (\r\n            <NewContactModal closeModal={closeModal} />\r\n          )}\r\n        </Modal>\r\n      </Offcanvas>\r\n    </>\r\n  )\r\n}\r\n","import React, { useState, useCallback } from 'react'\r\nimport { Form, InputGroup, Button } from 'react-bootstrap'\r\nimport { useConversations } from '../contexts/ConversationsProvider'\r\n\r\nexport default function OpenConversation() {\r\n  const [text, setText] = useState('')\r\n  const setRef = useCallback((node) => {\r\n    //1:22:00 why useCallback is used\r\n    if (node) {\r\n      node.scrollIntoView({ smooth: true })\r\n    }\r\n  }, [])\r\n\r\n  const { sendMessage, selectedConversation } = useConversations()\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault()\r\n\r\n    sendMessage(\r\n      selectedConversation.recipients.map((r) => r.id),\r\n      text\r\n    )\r\n    setText('')\r\n  }\r\n\r\n  return (\r\n    <div className='d-flex flex-column flex-grow-1'>\r\n      <div className='flex-grow-1 overflow-auto'>\r\n        {selectedConversation.messages.length === 0 ? (\r\n          <div className='warning no-message d-flex align-items-center justify-content-center '>\r\n            <p>\r\n              Start a conversation with\r\n              {` ${selectedConversation.recipients\r\n                .map((r) => r.name)\r\n                .join(', ')}`}\r\n            </p>\r\n          </div>\r\n        ) : (\r\n          selectedConversation.messages.map((message, index) => {\r\n            const lastMessage =\r\n              selectedConversation.messages.length - 1 === index\r\n            return (\r\n              <div\r\n                key={index}\r\n                className='d-flex flex-column align-items-start justify-content-end px-3'\r\n              >\r\n                <div\r\n                  ref={lastMessage ? setRef : null}\r\n                  className={`my-1 d-flex flex-column ${\r\n                    message.fromMe\r\n                      ? 'align-self-end align-items-end'\r\n                      : 'align-items-start'\r\n                  }`}\r\n                >\r\n                  <div\r\n                    style={{ maxWidth: '75vw' }}\r\n                    className={`rounded px-2 py-1  ${\r\n                      message.fromMe ? 'text-white bg-secondary ' : 'bg-light'\r\n                    }`}\r\n                  >\r\n                    {message.text}\r\n                  </div>\r\n                  <div\r\n                    className={`text-muted small ${\r\n                      message.fromMe ? 'text-right' : ''\r\n                    }`}\r\n                  >\r\n                    {message.fromMe ? 'You' : message.senderName}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )\r\n          })\r\n        )}\r\n      </div>\r\n      <Form onSubmit={handleSubmit}>\r\n        <Form.Group className='m-2'>\r\n          <InputGroup>\r\n            <Form.Control\r\n              as='textarea'\r\n              required\r\n              value={text}\r\n              onChange={(e) => setText(e.target.value)}\r\n              style={{ height: '75px', resize: 'none' }}\r\n            />\r\n            <Button disabled={!text} style={{ fontSize: '25px' }} type='submit'>\r\n              <i className='fa fa-paper-plane'></i>\r\n            </Button>\r\n          </InputGroup>\r\n        </Form.Group>\r\n      </Form>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useToggleSidebar } from './../contexts/ToggleSidebarProvider'\r\nimport { useConversations } from '../contexts/ConversationsProvider'\r\n\r\nimport { Button, Nav, Navbar } from 'react-bootstrap'\r\n\r\nconst Header = () => {\r\n  const { toggleSidebar } = useToggleSidebar()\r\n  const { selectedConversation } = useConversations()\r\n\r\n  return (\r\n    <Navbar\r\n      style={{ height: '10vh', color: 'white' }}\r\n      bg='dark'\r\n      className='d-flex justify-content-between px-3'\r\n    >\r\n      <Nav>\r\n        <Button\r\n          variant='link'\r\n          onClick={toggleSidebar}\r\n          style={{ fontSize: '1.7em', color: '#fff' }}\r\n        >\r\n          <i className='fa fa-bars'></i>\r\n        </Button>\r\n      </Nav>\r\n      {selectedConversation && (\r\n        <Nav style={{ fontSize: '1.5em', fontWeight: '400' }}>\r\n          {selectedConversation.recipients.map((recipient) => recipient.name)}\r\n        </Nav>\r\n      )}\r\n    </Navbar>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport { Modal, Button } from 'react-bootstrap'\r\n\r\nimport { useToggleSidebar } from '../contexts/ToggleSidebarProvider'\r\n\r\nconst IntroModal = ({ show, setShow }) => {\r\n  const { toggleSidebar } = useToggleSidebar()\r\n\r\n  const handleClose = () => {\r\n    setShow(false)\r\n    toggleSidebar()\r\n  }\r\n\r\n  const style = {\r\n    backgroundColor: '#8BC6EC',\r\n  }\r\n  return (\r\n    <Modal\r\n      centered\r\n      className='gradient-bg'\r\n      show={show}\r\n      onHide={handleClose}\r\n      backdrop='static'\r\n      keyboard={false}\r\n    >\r\n      <Modal.Header style={style}>\r\n        <Modal.Title>Let's start!</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body style={style}>\r\n        <ol>\r\n          <li>First, you need to add your friends to your contacts.</li>\r\n          <li>\r\n            Then you need to start a conversation by selecting from your\r\n            contacts.\r\n          </li>\r\n        </ol>\r\n      </Modal.Body>\r\n      <Modal.Footer style={style}>\r\n        <Button variant='primary' onClick={handleClose}>\r\n          Understood\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default IntroModal\r\n","import React, { useEffect, useState } from 'react'\r\nimport Sidebar from './Sidebar'\r\nimport OpenConversation from './OpenConversation'\r\nimport Header from './Header'\r\n\r\nimport { useConversations } from '../contexts/ConversationsProvider'\r\nimport IntroModal from './IntroModal'\r\n\r\nexport default function Dashboard({ id }) {\r\n  const [show, setShow] = useState(false)\r\n\r\n  const { selectedConversation } = useConversations()\r\n\r\n  useEffect(() => {\r\n    !selectedConversation && setShow(true)\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n\r\n      <div className='gradient-bg d-flex' style={{ height: '90vh' }}>\r\n        <Sidebar id={id} />\r\n        {selectedConversation && <OpenConversation />}\r\n        <IntroModal show={show} setShow={setShow} />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import './App.css'\r\nimport React from 'react'\r\n\r\nimport Login from './components/Login'\r\nimport useLocalStorage from './hooks/useLocalStorage'\r\nimport Dashboard from './components/Dashboard'\r\nimport { ContactsProvider } from './contexts/ContactsProvider'\r\nimport { ConversationsProvider } from './contexts/ConversationsProvider'\r\nimport { SocketProvider } from './contexts/SocketProvider'\r\nimport { ToggleSidebarProvider } from './contexts/ToggleSidebarProvider'\r\n\r\nfunction App() {\r\n  const [id, setId] = useLocalStorage('id', null)\r\n  const dashboard = (\r\n    <SocketProvider id={id}>\r\n      <ToggleSidebarProvider>\r\n        <ContactsProvider>\r\n          <ConversationsProvider id={id}>\r\n            <Dashboard id={id} />\r\n          </ConversationsProvider>\r\n        </ContactsProvider>\r\n      </ToggleSidebarProvider>\r\n    </SocketProvider>\r\n  )\r\n  return id ? dashboard : <Login onIdSubmit={setId} />\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport 'font-awesome/css/font-awesome.min.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}