{"version":3,"sources":["components/Login.js","hooks/useLocalStorage.js","contexts/ContactsProvider.js","contexts/SocketProvider.js","contexts/ConversationsProvider.js","components/Conversations.js","components/Contacts.js","components/NewContactModal.js","components/NewConversationModal.js","components/Sidebar.js","components/OpenConversation.js","components/Dashboard.js","App.js","index.js"],"names":["Login","onIdSubmit","idRef","useRef","Container","className","style","height","Form","onSubmit","e","preventDefault","current","value","md","Group","Control","placeholder","type","ref","required","ButtonGroup","Button","onClick","uuidV4","variant","useLocalStorage","key","initialValue","prefixedKey","useState","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","ContactsContext","React","createContext","useContacts","useContext","ContactsProvider","children","contacts","setContacts","Provider","createContact","id","name","prevContacts","SocketContext","SocketProvider","socket","setSocket","newSocket","io","query","close","ConversationsContext","useConversations","ConversationsProvider","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","addMessageToConversation","useCallback","recipients","text","sender","prevConversations","madeChange","newMessage","newConversations","map","conversation","a","b","length","sort","every","element","index","messages","on","off","formattedConversations","recipient","contact","find","message","fromMe","senderName","selected","selectedConversation","sendMessage","emit","selectConversationIndex","createConversation","Conversations","closeSideBar","handleClick","ListGroup","Item","action","active","join","Contacts","NewContactModal","closeModal","nameRef","Modal","Header","closeButton","Title","Body","console","log","Label","NewConversationModal","selectedContactIds","setSelectedContactIds","controlId","Check","includes","label","onChange","contactId","prevSelectedContactIds","filter","prevId","CONVERSATIONS_KEY","CONTACTS_KEY","Sidebar","activeKey","setActiveKey","modalOpen","setModalOpen","show","setShow","toggleSideBar","prev","Offcanvas","onHide","width","Tab","onSelect","as","Row","Nav","cursor","Link","eventKey","Content","Pane","bg","OpenConversation","setText","setRef","node","scrollIntoView","smooth","lastMessage","r","InputGroup","target","resize","Dashboard","App","setId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iNAIe,SAASA,EAAT,GAAgC,IAAfC,EAAc,EAAdA,WACxBC,EAAQC,mBAcd,OACE,cAACC,EAAA,EAAD,CACEC,UAAU,mDACVC,MAAO,CAAEC,OAAQ,SAFnB,SAIE,eAACC,EAAA,EAAD,CACEC,SAlBN,SAAsBC,GACpBA,EAAEC,iBAEFV,EAAWC,EAAMU,QAAQC,QAgBrBC,GAAG,IACHT,UAAU,yCAHZ,UAKE,cAACG,EAAA,EAAKO,MAAN,CAAYV,UAAU,OAAtB,SACE,cAACG,EAAA,EAAKQ,QAAN,CACEC,YAAY,gBACZC,KAAK,OACLC,IAAKjB,EACLkB,UAAQ,MAGZ,eAACC,EAAA,EAAD,CAAahB,UAAU,SAAS,aAAW,gBAA3C,UACE,cAACiB,EAAA,EAAD,CAAQjB,UAAU,OAAOa,KAAK,SAA9B,mBAGA,cAACI,EAAA,EAAD,CAAQjB,UAAU,OAAOkB,QA5BjC,WACEtB,EAAWuB,gBA2B0CC,QAAQ,YAAvD,4BCrCK,SAASC,EAAgBC,EAAKC,GAC3C,IAAMC,EAHO,kBAGgBF,EAC7B,EAA0BG,oBAAS,WACjC,IAAMC,EAAYC,aAAaC,QAAQJ,GACvC,OAAiB,MAAbE,EAA0BG,KAAKC,MAAMJ,GACb,oBAAjBH,EACFA,IAEAA,KANX,mBAAOf,EAAP,KAAcuB,EAAd,KAcA,OAJAC,qBAAU,WACRL,aAAaM,QAAQT,EAAaK,KAAKK,UAAU1B,MAChD,CAACgB,EAAahB,IAEV,CAACA,EAAOuB,G,yECjBXI,EAAkBC,IAAMC,gBAEvB,SAASC,IACd,OAAOC,qBAAWJ,GAGb,SAASK,EAAT,GAAyC,IAAbC,EAAY,EAAZA,SACjC,EAAgCpB,EAAgB,WAAY,IAA5D,mBAAOqB,EAAP,KAAiBC,EAAjB,KAQA,OACE,cAACR,EAAgBS,SAAjB,CAA0BpC,MAAO,CAAEkC,WAAUG,cAP/C,SAAuBC,EAAIC,GACzBJ,GAAY,SAACK,GACX,MAAM,GAAN,mBAAWA,GAAX,CAAyB,CAAEF,KAAIC,eAKjC,SACGN,I,qBCjBDQ,EAAgBb,IAAMC,gBASrB,SAASa,EAAT,GAA2C,IAAjBJ,EAAgB,EAAhBA,GAAIL,EAAY,EAAZA,SACnC,EAA4BhB,qBAA5B,mBAAO0B,EAAP,KAAeC,EAAf,KAUA,OARApB,qBAAU,WACR,IAAMqB,EAAYC,IAVC,2CAUkB,CAAEC,MAAO,CAAET,QAIhD,OAFAM,EAAUC,GAEH,kBAAMA,EAAUG,WACtB,CAACV,IAGF,cAACG,EAAcL,SAAf,CAAwBpC,MAAO2C,EAA/B,SAAwCV,ICnB5C,IAAMgB,EAAuBrB,IAAMC,gBAE5B,SAASqB,IACd,OAAOnB,qBAAWkB,GAGb,SAASE,EAAT,GAAkD,IAAjBb,EAAgB,EAAhBA,GAAIL,EAAY,EAAZA,SAC1C,EAA0CpB,EAAgB,gBAAiB,IAA3E,mBAAOuC,EAAP,KAAsBC,EAAtB,KACA,EAAkEpC,mBAAS,GAA3E,mBAAOqC,EAAP,KAAkCC,EAAlC,KACQrB,EAAaJ,IAAbI,SACFS,EDNCZ,qBAAWU,GCclB,IAAMe,EAA2BC,uBAE/B,YAAmC,IAAhCC,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACnBP,GAAiB,SAACQ,GAChB,IAAIC,GAAa,EACXC,EAAa,CAAEH,SAAQD,QACvBK,EAAmBH,EAAkBI,KAAI,SAACC,GAC9C,OAwEaC,EAxEKD,EAAaR,WAwEfU,EAxE2BV,EAyE/CS,EAAEE,SAAWD,EAAEC,SAEnBF,EAAEG,OACFF,EAAEE,OAEKH,EAAEI,OAAM,SAACC,EAASC,GACvB,OAAOD,IAAYJ,EAAEK,QA9EbX,GAAa,EACN,2BACFI,GADL,IAEEQ,SAAS,GAAD,mBAAMR,EAAaQ,UAAnB,CAA6BX,OAIlCG,EAgEjB,IAAuBC,EAAGC,KA7DlB,OAAIN,EACKE,EAED,GAAN,mBAAWH,GAAX,CAA8B,CAAEH,aAAYgB,SAAU,CAACX,WAI7D,CAACV,IAGH7B,qBAAU,WACR,GAAc,MAAVmB,EAIJ,OAFAA,EAAOgC,GAAG,kBAAmBnB,GAEtB,kBAAMb,EAAOiC,IAAI,sBACvB,CAACjC,EAAQa,IAQZ,IAAMqB,EAAyBzB,EAAca,KAAI,SAACC,EAAcO,GAC9D,IAAMf,EAAaQ,EAAaR,WAAWO,KAAI,SAACa,GAC9C,IAAMC,EAAU7C,EAAS8C,MAAK,SAACD,GAC7B,OAAOA,EAAQzC,KAAOwC,KAElBvC,EAAQwC,GAAWA,EAAQxC,MAASuC,EAC1C,MAAO,CAAExC,GAAIwC,EAAWvC,WAGpBmC,EAAWR,EAAaQ,SAAST,KAAI,SAACgB,GAC1C,IAAMF,EAAU7C,EAAS8C,MAAK,SAACD,GAC7B,OAAOA,EAAQzC,KAAO2C,EAAQrB,UAE1BrB,EAAQwC,GAAWA,EAAQxC,MAAS0C,EAAQrB,OAC5CsB,EAAS5C,IAAO2C,EAAQrB,OAC9B,OAAO,2BAAKqB,GAAZ,IAAqBE,WAAY5C,EAAM2C,cAGnCE,EAAWX,IAAUnB,EAC3B,OAAO,2BAAKY,GAAZ,IAA0BQ,WAAUhB,aAAY0B,gBAG5CpF,EAAQ,CACZoD,cAAeyB,EACfQ,qBAAsBR,EAAuBvB,GAC7CgC,YA/BF,SAAqB5B,EAAYC,GAC/BhB,EAAO4C,KAAK,eAAgB,CAAE7B,aAAYC,SAE1CH,EAAyB,CAAEE,aAAYC,OAAMC,OAAQtB,KA6BrDkD,wBAAyBjC,EACzBkC,mBA3EF,SAA4B/B,GAC1BL,GAAiB,SAACQ,GAChB,MAAM,GAAN,mBAAWA,GAAX,CAA8B,CAAEH,aAAYgB,SAAU,WA4E1D,OACE,cAACzB,EAAqBb,SAAtB,CAA+BpC,MAAOA,EAAtC,SACGiC,IC7FP,IA0BeyD,EA1BO,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACvB,EAAmDzC,IAA3CE,EAAR,EAAQA,cAAeoC,EAAvB,EAAuBA,wBAEjBI,EAAc,SAACnB,GACnBe,EAAwBf,GACxBkB,KAGF,OACE,cAACE,EAAA,EAAD,CAAWjF,QAAQ,QAAnB,SACGwC,EAAca,KAAI,SAACC,EAAcO,GAAf,OACjB,cAACoB,EAAA,EAAUC,KAAX,CAEEC,QAAM,EACNC,OAAQ9B,EAAakB,SACrB1E,QAASkF,EAAYnB,GAJvB,SAMGP,EAAaR,WACXO,KAAI,SAACa,GAAD,OAAeA,EAAUvC,QAC7B0D,KAAK,OAPHxB,SCDAyB,EAXE,WACf,IAAQhE,EAAaJ,IAAbI,SACR,OACE,cAAC2D,EAAA,EAAD,CAAWjF,QAAQ,QAAnB,SACGsB,EAAS+B,KAAI,SAACc,GAAD,OACZ,cAACc,EAAA,EAAUC,KAAX,UAAkCf,EAAQxC,MAArBwC,EAAQzC,UC4BtB6D,EAjCS,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACnB/G,EAAQC,mBACR+G,EAAU/G,mBACR+C,EAAkBP,IAAlBO,cAQR,OACE,qCACE,cAACiE,EAAA,EAAMC,OAAP,CAAcC,aAAW,EAAzB,SACE,cAACF,EAAA,EAAMG,MAAP,+BAEF,cAACH,EAAA,EAAMI,KAAP,UACE,eAAC/G,EAAA,EAAD,CAAMC,SAZZ,SAAsBC,GACpBA,EAAEC,iBACFuC,EAAchD,EAAMU,QAAQC,MAAOqG,EAAQtG,QAAQC,OACnDoG,IACAO,QAAQC,IAAI,eAQR,UACE,eAACjH,EAAA,EAAKO,MAAN,WACE,cAACP,EAAA,EAAKkH,MAAN,iBACA,cAAClH,EAAA,EAAKQ,QAAN,CAAcE,KAAK,OAAOC,IAAKjB,EAAOkB,UAAQ,OAEhD,eAACZ,EAAA,EAAKO,MAAN,WACE,cAACP,EAAA,EAAKkH,MAAN,mBACA,cAAClH,EAAA,EAAKQ,QAAN,CAAcE,KAAK,OAAOC,IAAK+F,EAAS9F,UAAQ,OAElD,cAACE,EAAA,EAAD,CAAQJ,KAAK,SAAb,6BCzBK,SAASyG,EAAT,GAA+C,IAAfV,EAAc,EAAdA,WAC7C,EAAoDnF,mBAAS,IAA7D,mBAAO8F,EAAP,KAA2BC,EAA3B,KACQ9E,EAAaJ,IAAbI,SACAuD,EAAuBvC,IAAvBuC,mBAqBR,OACE,qCACE,cAACa,EAAA,EAAMC,OAAP,CAAcC,aAAW,EAAzB,iCACA,cAACF,EAAA,EAAMI,KAAP,UACE,eAAC/G,EAAA,EAAD,CAAMC,SAvBZ,SAAsBC,GACpBA,EAAEC,iBAEF2F,EAAmBsB,GACnBX,KAmBI,UACGlE,EAAS+B,KAAI,SAACc,GAAD,OACZ,cAACpF,EAAA,EAAKO,MAAN,CAAY+G,UAAWlC,EAAQzC,GAA/B,SACE,cAAC3C,EAAA,EAAKuH,MAAN,CACE7G,KAAK,WACLL,MAAO+G,EAAmBI,SAASpC,EAAQzC,IAC3C8E,MAAOrC,EAAQxC,KACf8E,SAAU,kBAvBMC,EAuBqBvC,EAAQzC,QAtBzD0E,GAAsB,SAACO,GACrB,OAAIA,EAAuBJ,SAASG,GAC3BC,EAAuBC,QAAO,SAACC,GACpC,OAAOH,IAAcG,KAGjB,GAAN,mBAAWF,GAAX,CAAmCD,OAPzC,IAA8BA,MAkBoBvC,EAAQzC,OASlD,cAAC7B,EAAA,EAAD,CAAQJ,KAAK,SAAb,4BCnCV,IAAMqH,EAAoB,gBACpBC,EAAe,WAEN,SAASC,EAAT,GAA0B,IAAPtF,EAAM,EAANA,GAChC,EAAkCrB,mBAASyG,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAkC7G,oBAAS,GAA3C,mBAAO8G,EAAP,KAAkBC,EAAlB,KAEQ9F,EAAaJ,IAAbI,SACAkB,EAAkBF,IAAlBE,cAGR,SAASgD,IACP4B,GAAa,GAHfrB,QAAQC,IAAI1E,GAMZ,MAAwBjB,oBAAS,GAAjC,mBAAOgH,EAAP,KAAaC,EAAb,KAEMC,EAAgB,kBAAMD,GAAQ,SAACE,GAAD,OAAWA,MAE/C,OACE,qCACE,cAAC3H,EAAA,EAAD,CAAQjB,UAAU,YAAYoB,QAAQ,UAAUF,QAASyH,EAAzD,kBAGA,eAACE,EAAA,EAAD,CACEJ,KAAMA,EACNK,OAAQH,EACR1I,MAAO,CAAE8I,MAAO,SAChB/I,UAAU,qBAJZ,UAME,eAACgJ,EAAA,EAAIjJ,UAAL,CAAesI,UAAWA,EAAWY,SAAUX,EAA/C,UACE,cAACO,EAAA,EAAU9B,OAAX,CAAkBmC,GAAIC,IAAKnC,aAAW,EAAtC,SACE,eAACoC,EAAA,EAAD,CACEnJ,MAAO,CAAEoJ,OAAQ,WACjBjI,QAAQ,OACRpB,UAAU,kCAHZ,UAKE,cAAC6I,EAAA,EAAU5B,MAAX,UACE,cAACmC,EAAA,EAAI9C,KAAL,UACE,cAAC8C,EAAA,EAAIE,KAAL,CAAUC,SAAUrB,EAApB,+BAKJ,cAACW,EAAA,EAAU5B,MAAX,UACE,cAACmC,EAAA,EAAI9C,KAAL,UACE,cAAC8C,EAAA,EAAIE,KAAL,CAAUC,SAAUpB,EAApB,+BAKR,cAACU,EAAA,EAAU3B,KAAX,UACE,eAAC8B,EAAA,EAAIQ,QAAL,CAAaxJ,UAAU,4DAAvB,UACE,cAACgJ,EAAA,EAAIS,KAAL,CAAUF,SAAUrB,EAApB,SAC4B,IAAzBtE,EAAciB,OACb,mBAAG6E,GAAG,UAAU1J,UAAU,sBAA1B,2CAIA,cAAC,EAAD,CAAemG,aAAcwC,MAGjC,cAACK,EAAA,EAAIS,KAAL,CAAUF,SAAUpB,EAApB,SACGzF,EAASmC,OAAS,EACjB,cAAC,EAAD,IAEA,mBAAG7E,UAAU,sBAAb,6CAQR,sBAAKA,UAAU,oCAAf,sBACW,sBAAMA,UAAU,aAAhB,SAA8B8C,OAEzC,eAAC7B,EAAA,EAAD,CAAQC,QAAS,kBAAMsH,GAAa,IAAOxI,UAAU,YAArD,iBACOqI,IAAcH,EAAoB,eAAiB,gBAI5D,cAACpB,EAAA,EAAD,CAAO2B,KAAMF,EAAWO,OAAQlC,EAAhC,SACGyB,IAAcH,EACb,cAACZ,EAAD,CAAsBV,WAAYA,IAElC,cAAC,EAAD,CAAiBA,WAAYA,Y,aC3F1B,SAAS+C,IACtB,MAAwBlI,mBAAS,IAAjC,mBAAO0C,EAAP,KAAayF,EAAb,KACMC,EAAS5F,uBAAY,SAAC6F,GAEtBA,GACFA,EAAKC,eAAe,CAAEC,QAAQ,MAE/B,IAEH,EAA8CtG,IAAtCoC,EAAR,EAAQA,YAAaD,EAArB,EAAqBA,qBAYrB,OACE,sBAAK7F,UAAU,iCAAf,UACE,qBAAKA,UAAU,4BAAf,SACE,qBAAKA,UAAU,gEAAf,SACG6F,EAAqBX,SAAST,KAAI,SAACgB,EAASR,GAC3C,IAAMgF,EACJpE,EAAqBX,SAASL,OAAS,IAAMI,EAC/C,OACE,sBACEnE,IAAKmJ,EAAcJ,EAAS,KAE5B7J,UAAS,kCACPyF,EAAQC,OACJ,iCACA,qBANR,UASE,qBACE1F,UAAS,4BACPyF,EAAQC,OAAS,wBAA0B,UAF/C,SAKGD,EAAQtB,OAEX,qBACEnE,UAAS,2BACPyF,EAAQC,OAAS,aAAe,IAFpC,SAKGD,EAAQC,OAAS,MAAQD,EAAQE,eAnB/BV,UA0Bf,cAAC9E,EAAA,EAAD,CAAMC,SA9CV,SAAsBC,GACpBA,EAAEC,iBAEFwF,EACED,EAAqB3B,WAAWO,KAAI,SAACyF,GAAD,OAAOA,EAAEpH,MAC7CqB,GAEFyF,EAAQ,KAuCN,SACE,cAACzJ,EAAA,EAAKO,MAAN,CAAYV,UAAU,MAAtB,SACE,eAACmK,EAAA,EAAD,WACE,cAAChK,EAAA,EAAKQ,QAAN,CACEuI,GAAG,WACHnI,UAAQ,EACRP,MAAO2D,EACP0D,SAAU,SAACxH,GAAD,OAAOuJ,EAAQvJ,EAAE+J,OAAO5J,QAClCP,MAAO,CAAEC,OAAQ,OAAQmK,OAAQ,UAEnC,cAACpJ,EAAA,EAAD,CAAQJ,KAAK,SAAb,4BClEG,SAASyJ,EAAT,GAA4B,IAAPxH,EAAM,EAANA,GAC1B+C,EAAyBnC,IAAzBmC,qBAER,OACE,sBAAK7F,UAAU,SAASC,MAAO,CAAEC,OAAQ,SAAzC,UACE,cAACkI,EAAD,CAAStF,GAAIA,IACZ+C,GAAwB,cAAC8D,EAAD,OCahBY,MAdf,WACE,MAAoBlJ,EAAgB,KAAM,MAA1C,mBAAOyB,EAAP,KAAW0H,EAAX,KAUA,OAAO1H,EARL,cAACI,EAAD,CAAgBJ,GAAIA,EAApB,SACE,cAACN,EAAD,UACE,cAACmB,EAAD,CAAuBb,GAAIA,EAA3B,SACE,cAACwH,EAAD,CAAWxH,GAAIA,UAKC,cAACnD,EAAD,CAAOC,WAAY4K,K,OChB7CC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.cdf1d4f3.chunk.js","sourcesContent":["import React, { useRef } from 'react'\r\nimport { Container, Form, Button, ButtonGroup } from 'react-bootstrap'\r\nimport { v4 as uuidV4 } from 'uuid'\r\n\r\nexport default function Login({ onIdSubmit }) {\r\n  const idRef = useRef()\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault()\r\n\r\n    onIdSubmit(idRef.current.value)\r\n  }\r\n\r\n  function createNewId() {\r\n    onIdSubmit(uuidV4())\r\n  }\r\n\r\n  //xs={12} sm={8} lg={4}\r\n\r\n  return (\r\n    <Container\r\n      className='align-items-center d-flex justify-content-center'\r\n      style={{ height: '100vh' }}\r\n    >\r\n      <Form\r\n        onSubmit={handleSubmit}\r\n        md='8'\r\n        className='align-items-center d-flex flex-column '\r\n      >\r\n        <Form.Group className='mb-2'>\r\n          <Form.Control\r\n            placeholder='Enter Your Id'\r\n            type='text'\r\n            ref={idRef}\r\n            required\r\n          />\r\n        </Form.Group>\r\n        <ButtonGroup className='w-100 ' aria-label='Basic example'>\r\n          <Button className='w-50' type='submit'>\r\n            Login\r\n          </Button>\r\n          <Button className='w-50' onClick={createNewId} variant='secondary'>\r\n            New Id\r\n          </Button>\r\n        </ButtonGroup>\r\n      </Form>\r\n    </Container>\r\n  )\r\n}\r\n","import { useEffect, useState } from 'react'\r\n\r\nconst PREFIX = 'whatsapp-clone-'\r\n\r\nexport default function useLocalStorage(key, initialValue) {\r\n  const prefixedKey = PREFIX + key\r\n  const [value, setValue] = useState(() => {\r\n    const jsonValue = localStorage.getItem(prefixedKey)\r\n    if (jsonValue != null) return JSON.parse(jsonValue)\r\n    if (typeof initialValue === 'function') {\r\n      return initialValue()\r\n    } else {\r\n      return initialValue\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(prefixedKey, JSON.stringify(value))\r\n  }, [prefixedKey, value])\r\n\r\n  return [value, setValue]\r\n}\r\n","import React, { useContext } from 'react'\r\nimport useLocalStorage from '../hooks/useLocalStorage'\r\n\r\nconst ContactsContext = React.createContext()\r\n\r\nexport function useContacts() {\r\n  return useContext(ContactsContext)\r\n}\r\n\r\nexport function ContactsProvider({ children }) {\r\n  const [contacts, setContacts] = useLocalStorage('contacts', [])\r\n\r\n  function createContact(id, name) {\r\n    setContacts((prevContacts) => {\r\n      return [...prevContacts, { id, name }]\r\n    })\r\n  }\r\n\r\n  return (\r\n    <ContactsContext.Provider value={{ contacts, createContact }}>\r\n      {children}\r\n    </ContactsContext.Provider>\r\n  )\r\n}\r\n","import React, { useContext, useEffect, useState } from 'react'\r\nimport io from 'socket.io-client'\r\n\r\nconst SocketContext = React.createContext()\r\n\r\n//const DEV_URL = 'http://localhost:5000/'\r\nconst PRODUCTION_URL = 'https://dry-thicket-16746.herokuapp.com/'\r\n\r\nexport function useSocket() {\r\n  return useContext(SocketContext)\r\n}\r\n\r\nexport function SocketProvider({ id, children }) {\r\n  const [socket, setSocket] = useState()\r\n\r\n  useEffect(() => {\r\n    const newSocket = io(PRODUCTION_URL, { query: { id } })\r\n\r\n    setSocket(newSocket)\r\n\r\n    return () => newSocket.close()\r\n  }, [id])\r\n\r\n  return (\r\n    <SocketContext.Provider value={socket}>{children}</SocketContext.Provider>\r\n  )\r\n}\r\n","import React, { useContext, useState, useEffect, useCallback } from 'react'\r\nimport useLocalStorage from '../hooks/useLocalStorage'\r\nimport { useContacts } from './ContactsProvider'\r\nimport { useSocket } from './SocketProvider'\r\n\r\nconst ConversationsContext = React.createContext()\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext)\r\n}\r\n\r\nexport function ConversationsProvider({ id, children }) {\r\n  const [conversations, setConversations] = useLocalStorage('conversations', [])\r\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0)\r\n  const { contacts } = useContacts()\r\n  const socket = useSocket()\r\n\r\n  function createConversation(recipients) {\r\n    setConversations((prevConversations) => {\r\n      return [...prevConversations, { recipients, messages: [] }]\r\n    })\r\n  }\r\n\r\n  const addMessageToConversation = useCallback(\r\n    //useCallback is used in order to prevent re-render addMessageToConversation in useEffect as dependency\r\n    ({ recipients, text, sender }) => {\r\n      setConversations((prevConversations) => {\r\n        let madeChange = false\r\n        const newMessage = { sender, text }\r\n        const newConversations = prevConversations.map((conversation) => {\r\n          if (arrayEquality(conversation.recipients, recipients)) {\r\n            madeChange = true\r\n            return {\r\n              ...conversation,\r\n              messages: [...conversation.messages, newMessage],\r\n            }\r\n          }\r\n\r\n          return conversation\r\n        })\r\n\r\n        if (madeChange) {\r\n          return newConversations\r\n        } else {\r\n          return [...prevConversations, { recipients, messages: [newMessage] }]\r\n        }\r\n      })\r\n    },\r\n    [setConversations]\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (socket == null) return\r\n\r\n    socket.on('receive-message', addMessageToConversation)\r\n\r\n    return () => socket.off('receive-message')\r\n  }, [socket, addMessageToConversation])\r\n\r\n  function sendMessage(recipients, text) {\r\n    socket.emit('send-message', { recipients, text })\r\n\r\n    addMessageToConversation({ recipients, text, sender: id })\r\n  }\r\n\r\n  const formattedConversations = conversations.map((conversation, index) => {\r\n    const recipients = conversation.recipients.map((recipient) => {\r\n      const contact = contacts.find((contact) => {\r\n        return contact.id === recipient\r\n      })\r\n      const name = (contact && contact.name) || recipient\r\n      return { id: recipient, name }\r\n    })\r\n\r\n    const messages = conversation.messages.map((message) => {\r\n      const contact = contacts.find((contact) => {\r\n        return contact.id === message.sender\r\n      })\r\n      const name = (contact && contact.name) || message.sender\r\n      const fromMe = id === message.sender\r\n      return { ...message, senderName: name, fromMe }\r\n    })\r\n\r\n    const selected = index === selectedConversationIndex\r\n    return { ...conversation, messages, recipients, selected }\r\n  })\r\n\r\n  const value = {\r\n    conversations: formattedConversations,\r\n    selectedConversation: formattedConversations[selectedConversationIndex],\r\n    sendMessage,\r\n    selectConversationIndex: setSelectedConversationIndex,\r\n    createConversation,\r\n  }\r\n\r\n  return (\r\n    <ConversationsContext.Provider value={value}>\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  )\r\n}\r\n\r\nfunction arrayEquality(a, b) {\r\n  if (a.length !== b.length) return false\r\n\r\n  a.sort()\r\n  b.sort()\r\n\r\n  return a.every((element, index) => {\r\n    return element === b[index]\r\n  })\r\n}\r\n","import React from 'react'\r\nimport { ListGroup } from 'react-bootstrap'\r\nimport { useConversations } from '../contexts/ConversationsProvider'\r\n\r\nconst Conversations = ({ closeSideBar }) => {\r\n  const { conversations, selectConversationIndex } = useConversations()\r\n\r\n  const handleClick = (index) => {\r\n    selectConversationIndex(index)\r\n    closeSideBar()\r\n  }\r\n\r\n  return (\r\n    <ListGroup variant='flush'>\r\n      {conversations.map((conversation, index) => (\r\n        <ListGroup.Item\r\n          key={index}\r\n          action\r\n          active={conversation.selected}\r\n          onClick={handleClick(index)}\r\n        >\r\n          {conversation.recipients\r\n            .map((recipient) => recipient.name)\r\n            .join(', ')}\r\n        </ListGroup.Item>\r\n      ))}\r\n    </ListGroup>\r\n  )\r\n}\r\n\r\nexport default Conversations\r\n","import React from 'react'\r\nimport { ListGroup } from 'react-bootstrap'\r\nimport { useContacts } from '../contexts/ContactsProvider'\r\n\r\nconst Contacts = () => {\r\n  const { contacts } = useContacts()\r\n  return (\r\n    <ListGroup variant='flush'>\r\n      {contacts.map((contact) => (\r\n        <ListGroup.Item key={contact.id}>{contact.name}</ListGroup.Item>\r\n      ))}\r\n    </ListGroup>\r\n  )\r\n}\r\n\r\nexport default Contacts\r\n","import React, { useRef } from 'react'\r\nimport { Button, Form, Modal } from 'react-bootstrap'\r\nimport { useContacts } from '../contexts/ContactsProvider'\r\n\r\nconst NewContactModal = ({ closeModal }) => {\r\n  const idRef = useRef()\r\n  const nameRef = useRef()\r\n  const { createContact } = useContacts()\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault()\r\n    createContact(idRef.current.value, nameRef.current.value)\r\n    closeModal()\r\n    console.log('FormSubmit')\r\n  }\r\n  return (\r\n    <>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>Create Contact</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <Form onSubmit={handleSubmit}>\r\n          <Form.Group>\r\n            <Form.Label>Id</Form.Label>\r\n            <Form.Control type='text' ref={idRef} required />\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Name</Form.Label>\r\n            <Form.Control type='text' ref={nameRef} required />\r\n          </Form.Group>\r\n          <Button type='submit'>Create</Button>\r\n        </Form>\r\n      </Modal.Body>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default NewContactModal\r\n","import React, { useState } from 'react'\r\nimport { Modal, Form, Button } from 'react-bootstrap'\r\nimport { useContacts } from '../contexts/ContactsProvider'\r\nimport { useConversations } from '../contexts/ConversationsProvider'\r\n\r\nexport default function NewConversationModal({ closeModal }) {\r\n  const [selectedContactIds, setSelectedContactIds] = useState([])\r\n  const { contacts } = useContacts()\r\n  const { createConversation } = useConversations()\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault()\r\n\r\n    createConversation(selectedContactIds)\r\n    closeModal()\r\n  }\r\n\r\n  function handleCheckboxChange(contactId) {\r\n    setSelectedContactIds((prevSelectedContactIds) => {\r\n      if (prevSelectedContactIds.includes(contactId)) {\r\n        return prevSelectedContactIds.filter((prevId) => {\r\n          return contactId !== prevId\r\n        })\r\n      } else {\r\n        return [...prevSelectedContactIds, contactId]\r\n      }\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Modal.Header closeButton>Create Conversation</Modal.Header>\r\n      <Modal.Body>\r\n        <Form onSubmit={handleSubmit}>\r\n          {contacts.map((contact) => (\r\n            <Form.Group controlId={contact.id} key={contact.id}>\r\n              <Form.Check\r\n                type='checkbox'\r\n                value={selectedContactIds.includes(contact.id)}\r\n                label={contact.name}\r\n                onChange={() => handleCheckboxChange(contact.id)}\r\n              />\r\n            </Form.Group>\r\n          ))}\r\n          <Button type='submit'>Create</Button>\r\n        </Form>\r\n      </Modal.Body>\r\n    </>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Tab, Nav, Button, Modal, Offcanvas, Row } from 'react-bootstrap'\r\nimport Conversations from './Conversations'\r\nimport Contacts from './Contacts'\r\nimport NewContactModal from './NewContactModal'\r\nimport NewConversationModal from './NewConversationModal'\r\nimport { useContacts } from '../contexts/ContactsProvider'\r\nimport { useConversations } from '../contexts/ConversationsProvider'\r\n\r\nconst CONVERSATIONS_KEY = 'conversations'\r\nconst CONTACTS_KEY = 'contacts'\r\n\r\nexport default function Sidebar({ id }) {\r\n  const [activeKey, setActiveKey] = useState(CONVERSATIONS_KEY)\r\n  const [modalOpen, setModalOpen] = useState(false)\r\n\r\n  const { contacts } = useContacts()\r\n  const { conversations } = useConversations()\r\n  console.log(contacts)\r\n\r\n  function closeModal() {\r\n    setModalOpen(false)\r\n  }\r\n\r\n  const [show, setShow] = useState(false)\r\n\r\n  const toggleSideBar = () => setShow((prev) => !prev)\r\n\r\n  return (\r\n    <>\r\n      <Button className='menu-btn ' variant='primary' onClick={toggleSideBar}>\r\n        Menu\r\n      </Button>\r\n      <Offcanvas\r\n        show={show}\r\n        onHide={toggleSideBar}\r\n        style={{ width: '350px' }}\r\n        className='d-flex flex-column'\r\n      >\r\n        <Tab.Container activeKey={activeKey} onSelect={setActiveKey}>\r\n          <Offcanvas.Header as={Row} closeButton>\r\n            <Nav\r\n              style={{ cursor: 'pointer' }}\r\n              variant='tabs'\r\n              className='justify-content-center flex-row'\r\n            >\r\n              <Offcanvas.Title>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey={CONVERSATIONS_KEY}>\r\n                    Conversations\r\n                  </Nav.Link>\r\n                </Nav.Item>\r\n              </Offcanvas.Title>\r\n              <Offcanvas.Title>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey={CONTACTS_KEY}>Contacts</Nav.Link>\r\n                </Nav.Item>\r\n              </Offcanvas.Title>\r\n            </Nav>\r\n          </Offcanvas.Header>\r\n          <Offcanvas.Body>\r\n            <Tab.Content className='left-tab-container border-right overflow-auto flex-grow-1'>\r\n              <Tab.Pane eventKey={CONVERSATIONS_KEY}>\r\n                {conversations.length === 0 ? (\r\n                  <p bg='warning' className='warning text-center'>\r\n                    You have no conversations yet\r\n                  </p>\r\n                ) : (\r\n                  <Conversations closeSideBar={toggleSideBar} />\r\n                )}\r\n              </Tab.Pane>\r\n              <Tab.Pane eventKey={CONTACTS_KEY}>\r\n                {contacts.length > 0 ? (\r\n                  <Contacts />\r\n                ) : (\r\n                  <p className='warning text-center'>\r\n                    You have no contacts yet\r\n                  </p>\r\n                )}\r\n              </Tab.Pane>\r\n            </Tab.Content>\r\n          </Offcanvas.Body>\r\n\r\n          <div className='p-2 border-top border-right small'>\r\n            Your Id: <span className='text-muted'>{id}</span>\r\n          </div>\r\n          <Button onClick={() => setModalOpen(true)} className='rounded-0'>\r\n            New {activeKey === CONVERSATIONS_KEY ? 'Conversation' : 'Contact'}\r\n          </Button>\r\n        </Tab.Container>\r\n\r\n        <Modal show={modalOpen} onHide={closeModal}>\r\n          {activeKey === CONVERSATIONS_KEY ? (\r\n            <NewConversationModal closeModal={closeModal} />\r\n          ) : (\r\n            <NewContactModal closeModal={closeModal} />\r\n          )}\r\n        </Modal>\r\n      </Offcanvas>\r\n    </>\r\n  )\r\n}\r\n","import React, { useState, useCallback } from 'react'\r\nimport { Form, InputGroup, Button } from 'react-bootstrap'\r\nimport { useConversations } from '../contexts/ConversationsProvider'\r\n\r\nexport default function OpenConversation() {\r\n  const [text, setText] = useState('')\r\n  const setRef = useCallback((node) => {\r\n    //1:22:00 why useCallback is used\r\n    if (node) {\r\n      node.scrollIntoView({ smooth: true })\r\n    }\r\n  }, [])\r\n\r\n  const { sendMessage, selectedConversation } = useConversations()\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault()\r\n\r\n    sendMessage(\r\n      selectedConversation.recipients.map((r) => r.id),\r\n      text\r\n    )\r\n    setText('')\r\n  }\r\n\r\n  return (\r\n    <div className='d-flex flex-column flex-grow-1'>\r\n      <div className='flex-grow-1 overflow-auto'>\r\n        <div className='d-flex flex-column align-items-start justify-content-end px-3'>\r\n          {selectedConversation.messages.map((message, index) => {\r\n            const lastMessage =\r\n              selectedConversation.messages.length - 1 === index\r\n            return (\r\n              <div\r\n                ref={lastMessage ? setRef : null}\r\n                key={index}\r\n                className={`my-1 d-flex flex-column ${\r\n                  message.fromMe\r\n                    ? 'align-self-end align-items-end'\r\n                    : 'align-items-start'\r\n                }`}\r\n              >\r\n                <div\r\n                  className={`rounded px-2 py-1 ${\r\n                    message.fromMe ? 'bg-primary text-white' : 'border'\r\n                  }`}\r\n                >\r\n                  {message.text}\r\n                </div>\r\n                <div\r\n                  className={`text-muted small ${\r\n                    message.fromMe ? 'text-right' : ''\r\n                  }`}\r\n                >\r\n                  {message.fromMe ? 'You' : message.senderName}\r\n                </div>\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n      </div>\r\n      <Form onSubmit={handleSubmit}>\r\n        <Form.Group className='m-2'>\r\n          <InputGroup>\r\n            <Form.Control\r\n              as='textarea'\r\n              required\r\n              value={text}\r\n              onChange={(e) => setText(e.target.value)}\r\n              style={{ height: '75px', resize: 'none' }}\r\n            />\r\n            <Button type='submit'>Send</Button>\r\n          </InputGroup>\r\n        </Form.Group>\r\n      </Form>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport Sidebar from './Sidebar'\r\nimport OpenConversation from './OpenConversation'\r\nimport { useConversations } from '../contexts/ConversationsProvider'\r\n\r\nexport default function Dashboard({ id }) {\r\n  const { selectedConversation } = useConversations()\r\n\r\n  return (\r\n    <div className='d-flex' style={{ height: '100vh' }}>\r\n      <Sidebar id={id} />\r\n      {selectedConversation && <OpenConversation />}\r\n    </div>\r\n  )\r\n}\r\n","import './App.css'\r\nimport React from 'react'\r\n\r\nimport Login from './components/Login'\r\nimport useLocalStorage from './hooks/useLocalStorage'\r\nimport Dashboard from './components/Dashboard'\r\nimport { ContactsProvider } from './contexts/ContactsProvider'\r\nimport { ConversationsProvider } from './contexts/ConversationsProvider'\r\nimport { SocketProvider } from './contexts/SocketProvider'\r\n\r\nfunction App() {\r\n  const [id, setId] = useLocalStorage('id', null)\r\n  const dashboard = (\r\n    <SocketProvider id={id}>\r\n      <ContactsProvider>\r\n        <ConversationsProvider id={id}>\r\n          <Dashboard id={id} />\r\n        </ConversationsProvider>\r\n      </ContactsProvider>\r\n    </SocketProvider>\r\n  )\r\n  return id ? dashboard : <Login onIdSubmit={setId} />\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}